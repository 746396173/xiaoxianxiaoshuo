package com.xh.xiaoshuo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xh.xiaoshuo.bean.BookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_BEAN".
*/
public class BookBeanDao extends AbstractDao<BookBean, Long> {

    public static final String TABLENAME = "BOOK_BEAN";

    /**
     * Properties of entity BookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImageUrl = new Property(1, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Auther = new Property(3, String.class, "auther", false, "AUTHER");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property ReadNum = new Property(5, int.class, "readNum", false, "READ_NUM");
        public final static Property ReadPage = new Property(6, int.class, "readPage", false, "READ_PAGE");
        public final static Property MaxNum = new Property(7, int.class, "maxNum", false, "MAX_NUM");
        public final static Property Link = new Property(8, String.class, "link", false, "LINK");
        public final static Property SourceId = new Property(9, int.class, "sourceId", false, "SOURCE_ID");
        public final static Property SourceName = new Property(10, String.class, "sourceName", false, "SOURCE_NAME");
        public final static Property SourceUrl = new Property(11, String.class, "sourceUrl", false, "SOURCE_URL");
        public final static Property State = new Property(12, int.class, "state", false, "STATE");
        public final static Property OpenTime = new Property(13, long.class, "openTime", false, "OPEN_TIME");
        public final static Property HasNofity = new Property(14, boolean.class, "hasNofity", false, "HAS_NOFITY");
    }


    public BookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMAGE_URL\" TEXT," + // 1: imageUrl
                "\"NAME\" TEXT," + // 2: name
                "\"AUTHER\" TEXT," + // 3: auther
                "\"DESC\" TEXT," + // 4: desc
                "\"READ_NUM\" INTEGER NOT NULL ," + // 5: readNum
                "\"READ_PAGE\" INTEGER NOT NULL ," + // 6: readPage
                "\"MAX_NUM\" INTEGER NOT NULL ," + // 7: maxNum
                "\"LINK\" TEXT," + // 8: link
                "\"SOURCE_ID\" INTEGER NOT NULL ," + // 9: sourceId
                "\"SOURCE_NAME\" TEXT," + // 10: sourceName
                "\"SOURCE_URL\" TEXT," + // 11: sourceUrl
                "\"STATE\" INTEGER NOT NULL ," + // 12: state
                "\"OPEN_TIME\" INTEGER NOT NULL ," + // 13: openTime
                "\"HAS_NOFITY\" INTEGER NOT NULL );"); // 14: hasNofity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(2, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String auther = entity.getAuther();
        if (auther != null) {
            stmt.bindString(4, auther);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
        stmt.bindLong(6, entity.getReadNum());
        stmt.bindLong(7, entity.getReadPage());
        stmt.bindLong(8, entity.getMaxNum());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(9, link);
        }
        stmt.bindLong(10, entity.getSourceId());
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(11, sourceName);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(12, sourceUrl);
        }
        stmt.bindLong(13, entity.getState());
        stmt.bindLong(14, entity.getOpenTime());
        stmt.bindLong(15, entity.getHasNofity() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(2, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String auther = entity.getAuther();
        if (auther != null) {
            stmt.bindString(4, auther);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
        stmt.bindLong(6, entity.getReadNum());
        stmt.bindLong(7, entity.getReadPage());
        stmt.bindLong(8, entity.getMaxNum());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(9, link);
        }
        stmt.bindLong(10, entity.getSourceId());
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(11, sourceName);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(12, sourceUrl);
        }
        stmt.bindLong(13, entity.getState());
        stmt.bindLong(14, entity.getOpenTime());
        stmt.bindLong(15, entity.getHasNofity() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookBean readEntity(Cursor cursor, int offset) {
        BookBean entity = new BookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // auther
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.getInt(offset + 5), // readNum
            cursor.getInt(offset + 6), // readPage
            cursor.getInt(offset + 7), // maxNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // link
            cursor.getInt(offset + 9), // sourceId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sourceName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sourceUrl
            cursor.getInt(offset + 12), // state
            cursor.getLong(offset + 13), // openTime
            cursor.getShort(offset + 14) != 0 // hasNofity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuther(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReadNum(cursor.getInt(offset + 5));
        entity.setReadPage(cursor.getInt(offset + 6));
        entity.setMaxNum(cursor.getInt(offset + 7));
        entity.setLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSourceId(cursor.getInt(offset + 9));
        entity.setSourceName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSourceUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.getInt(offset + 12));
        entity.setOpenTime(cursor.getLong(offset + 13));
        entity.setHasNofity(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
